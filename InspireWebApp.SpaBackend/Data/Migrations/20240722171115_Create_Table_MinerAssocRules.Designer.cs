// <auto-generated />
using System;
using InspireWebApp.SpaBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InspireWebApp.SpaBackend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240722171115_Create_Table_MinerAssocRules")]
    partial class CreateTableMinerAssocRules
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InspireWebApp.SpaBackend.Data.AssociationRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Confidence")
                        .HasColumnType("float");

                    b.Property<string>("LeftHand")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<double>("Lift")
                        .HasColumnType("float");

                    b.Property<string>("RightHand")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<double>("Support")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("MinerAssocRules");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Data.CityAnalysis.CustomerDistributionByCityRecord", b =>
                {
                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfCustomers")
                        .HasColumnType("int");

                    b.ToTable("CustomerDistributionByCityRecords");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Data.CityAnalysis.TopSellingCitiesRecord", b =>
                {
                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Volume")
                        .HasColumnType("int");

                    b.ToTable("TopSellingCitiesRecords");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Data.CustomerAnalysis.CustomerDistributionByCategoryRecord", b =>
                {
                    b.Property<string>("CustomerCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfCustomers")
                        .HasColumnType("int");

                    b.ToTable("CustomerDistributionByCategoryRecords");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Data.CustomerAnalysis.CustomerDistributionBySegmentRecord", b =>
                {
                    b.Property<int>("NumberOfCustomers")
                        .HasColumnType("int");

                    b.Property<string>("SegmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("CustomerDistributionBySegmentRecords");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Data.CustomerAnalysis.SalesByCustomerCategoryRecord", b =>
                {
                    b.Property<string>("CustomerCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Volume")
                        .HasColumnType("int");

                    b.ToTable("SalesByCustomerCategoryRecords");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Data.ProductSales.SalesByProductPackTypeRecord", b =>
                {
                    b.Property<string>("ProductPackTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Volume")
                        .HasColumnType("int");

                    b.ToTable("SalesByProductPackTypeRecords");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Data.ProductSales.SalesByProductTagsRecord", b =>
                {
                    b.Property<string>("ProductTagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Volume")
                        .HasColumnType("int");

                    b.ToTable("SalesByProductTagsRecords");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Data.ProductSales.TopProfitableProductsPerPackTypeRecord", b =>
                {
                    b.Property<decimal>("Contribution")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductPackType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Volume")
                        .HasColumnType("int");

                    b.ToTable("TopProfitableProductsPerPackTypeRecords");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Data.ProductSales.TopProfitableProductsPerTagsRecord", b =>
                {
                    b.Property<decimal>("Contribution")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductTag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Volume")
                        .HasColumnType("int");

                    b.ToTable("TopProfitableProductsPerTagsRecords");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Data.ProductSales.TopSellingProductsRecord", b =>
                {
                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Volume")
                        .HasColumnType("int");

                    b.ToTable("TopSellingProducts");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Data.SalesRecord", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CATEGORY_ID");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("CATEGORY_NAME");

                    b.Property<int>("Day")
                        .HasColumnType("int")
                        .HasColumnName("DAY");

                    b.Property<int>("Month")
                        .HasColumnType("int")
                        .HasColumnName("MONTH");

                    b.Property<double?>("Price")
                        .HasColumnType("float")
                        .HasColumnName("M_PRICE");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("PRODUCT_ID");

                    b.Property<string>("ProductName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("PRODUCT_NAME");

                    b.Property<double?>("Quantity")
                        .HasColumnType("float")
                        .HasColumnName("M_QUANTITY");

                    b.Property<int>("Quarter")
                        .HasColumnType("int")
                        .HasColumnName("QUARTER");

                    b.Property<double?>("SalesValue")
                        .HasColumnType("float")
                        .HasColumnName("M_SALES_VALUE");

                    b.Property<double?>("SalesVolume")
                        .HasColumnType("float")
                        .HasColumnName("M_SALES_VOLUME");

                    b.Property<double?>("Size")
                        .HasColumnType("float")
                        .HasColumnName("M_SIZE");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("YEAR");

                    b.ToTable("Sales", (string)null);
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Data.TimelySales.DailySalesRecord", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Volume")
                        .HasColumnType("int");

                    b.ToTable("DailySalesRecords");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Data.TimelySales.DaySalesRecord", b =>
                {
                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DayNo")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Volume")
                        .HasColumnType("int");

                    b.ToTable("DaySalesRecords");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Data.TimelySales.HourlySalesRecord", b =>
                {
                    b.Property<int>("Hour")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Volume")
                        .HasColumnType("int");

                    b.ToTable("HourlySalesRecords");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Data.TimelySales.MonthlySalesRecord", b =>
                {
                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Volume")
                        .HasColumnType("int");

                    b.ToTable("MonthlySalesRecords");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Data.TimelySales.QuarterlySalesRecord", b =>
                {
                    b.Property<int>("Quarter")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Volume")
                        .HasColumnType("int");

                    b.ToTable("QuarterlySalesRecords");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Data.TimelySales.YearlySalesRecord", b =>
                {
                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Volume")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.ToTable("YearlySalesRecords");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Features.Cities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Features.CustomerCategories.CustomerCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("CustomerCategories");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Features.Customers.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("RfmScore")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("Segment")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CustomerCategoryId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Features.Dashboard.ConfigurableDashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ConfigurableDashboards");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Features.Dashboard.ConfigurableDashboardTile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ConfigurableDashboardId")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurableDashboardId");

                    b.ToTable("ConfigurableDashboardTiles");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Features.Dashboard.SalesByYearBoxplotData", b =>
                {
                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<double>("Max")
                        .HasColumnType("float");

                    b.Property<double>("Median")
                        .HasColumnType("float");

                    b.Property<double>("Min")
                        .HasColumnType("float");

                    b.Property<double>("Q1")
                        .HasColumnType("float");

                    b.Property<double>("Q3")
                        .HasColumnType("float");

                    b.Property<double>("TotalVolume")
                        .HasColumnType("float");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.ToTable("_______NON_EXISTING_TABLE_InspireWebApp.SpaBackend.Features.Dashboard.SalesByYearBoxplotData", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Features.Dashboard.SalesByYearOutlierData", b =>
                {
                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.ToTable("_______NON_EXISTING_TABLE_InspireWebApp.SpaBackend.Features.Dashboard.SalesByYearOutlierData", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Features.Employees.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Features.Identity.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Features.Invoices.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Features.Invoices.InvoiceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("InvoiceDetail");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Features.ProductPackageTypes.ProductPackageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProductPackageTypes");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Features.ProductTags.ProductTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("TagId", "ProductId")
                        .IsUnique();

                    b.ToTable("ProductTags");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Features.Products.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PackageTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PackageTypeId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Features.Tags.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Features.Customers.Customer", b =>
                {
                    b.HasOne("InspireWebApp.SpaBackend.Features.Cities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InspireWebApp.SpaBackend.Features.CustomerCategories.CustomerCategory", "CustomerCategory")
                        .WithMany()
                        .HasForeignKey("CustomerCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("CustomerCategory");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Features.Dashboard.ConfigurableDashboardTile", b =>
                {
                    b.HasOne("InspireWebApp.SpaBackend.Features.Dashboard.ConfigurableDashboard", "Dashboard")
                        .WithMany("Tiles")
                        .HasForeignKey("ConfigurableDashboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("InspireWebApp.SpaBackend.Features.Dashboard.PredefinedVisualizationTileOptions", "PredefinedVisualizationOptions", b1 =>
                        {
                            b1.Property<long>("ConfigurableDashboardTileId")
                                .HasColumnType("bigint");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.HasKey("ConfigurableDashboardTileId");

                            b1.ToTable("ConfigurableDashboardTiles");

                            b1.WithOwner()
                                .HasForeignKey("ConfigurableDashboardTileId");
                        });

                    b.Navigation("Dashboard");

                    b.Navigation("PredefinedVisualizationOptions");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Features.Invoices.Invoice", b =>
                {
                    b.HasOne("InspireWebApp.SpaBackend.Features.Customers.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InspireWebApp.SpaBackend.Features.Employees.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Features.Invoices.InvoiceDetail", b =>
                {
                    b.HasOne("InspireWebApp.SpaBackend.Features.Invoices.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InspireWebApp.SpaBackend.Features.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Features.ProductTags.ProductTag", b =>
                {
                    b.HasOne("InspireWebApp.SpaBackend.Features.Products.Product", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InspireWebApp.SpaBackend.Features.Tags.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Features.Products.Product", b =>
                {
                    b.HasOne("InspireWebApp.SpaBackend.Features.ProductPackageTypes.ProductPackageType", "PackageType")
                        .WithMany()
                        .HasForeignKey("PackageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PackageType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("InspireWebApp.SpaBackend.Features.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("InspireWebApp.SpaBackend.Features.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("InspireWebApp.SpaBackend.Features.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Features.Dashboard.ConfigurableDashboard", b =>
                {
                    b.Navigation("Tiles");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Features.Invoices.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("InspireWebApp.SpaBackend.Features.Products.Product", b =>
                {
                    b.Navigation("ProductTags");
                });
#pragma warning restore 612, 618
        }
    }
}
